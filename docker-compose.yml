version: "3"
services:
  proxy:
    image: traefik:v2.9.6
    command: --api.insecure=true --providers.docker
    ports:
      - "80:80"
      - "8080:8080"
    expose:
      - 80
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  mongo:
    image: mongo
    ports:
      - 27017:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:$DB_PORT/test --quiet
      interval: 2s
      timeout: 10s
      retries: 5
  books-service:
    image: ianyangmax/app-books:1.0.0
    expose:
      - 9080
    environment:
      - MONGO_HOSTNAME=mongo
      - MONGO_PORT=27017
      - MONGO_DBNAME=distribuida
      - MONGO_USER=root
      - MONGO_PASSWORD=root
      - PORT=9080
    depends_on:
      mongo:
        condition: service_healthy
    deploy:
      replicas: 3
    labels:
      - "traefik.http.routers.books.rule=PathPrefix(`/app1`)"
      - "traefik.http.middlewares.books.stripprefix.prefixes=/app1"
      - "traefik.http.routers.books.middlewares=books"
  authors-service:
    image: ianyangmax/app-authors:1.0.0
    expose:
      - 9090
    environment:
      - SERVER_PORT=9090
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres-sql
      - DB_DRIVER=pg
      - DB_DATABASE=distribuida
      - DB_PORT=5432
    depends_on:
      postgres-sql:
        condition: service_healthy
    labels:
      - "traefik.http.routers.authors.rule=PathPrefix(`/app2`)"
      - "traefik.http.middlewares.authors.stripprefix.prefixes=/app2"
      - "traefik.http.routers.authors.middlewares=authors"
    deploy:
      replicas: 2
  postgres-sql:
    image: postgres:alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: distribuida
    ports:
       - 5432:5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 2s
      timeout: 10s
      retries: 10



